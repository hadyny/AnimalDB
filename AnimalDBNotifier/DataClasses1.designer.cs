#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AnimalDB.Notifier
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aspnet-AnimalDB-20150205100020")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnimal(Animal instance);
    partial void UpdateAnimal(Animal instance);
    partial void DeleteAnimal(Animal instance);
    partial void InsertAspNetUser(AspNetUser instance);
    partial void UpdateAspNetUser(AspNetUser instance);
    partial void DeleteAspNetUser(AspNetUser instance);
    partial void InsertMedication(Medication instance);
    partial void UpdateMedication(Medication instance);
    partial void DeleteMedication(Medication instance);
    partial void InsertNotification(Notification instance);
    partial void UpdateNotification(Notification instance);
    partial void DeleteNotification(Notification instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertMedicationType(MedicationType instance);
    partial void UpdateMedicationType(MedicationType instance);
    partial void DeleteMedicationType(MedicationType instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::AnimalDB.Notifier.Properties.Settings.Default.AnimalDB2ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Animal> Animals
		{
			get
			{
				return this.GetTable<Animal>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUser> AspNetUsers
		{
			get
			{
				return this.GetTable<AspNetUser>();
			}
		}
		
		public System.Data.Linq.Table<Medication> Medications
		{
			get
			{
				return this.GetTable<Medication>();
			}
		}
		
		public System.Data.Linq.Table<Notification> Notifications
		{
			get
			{
				return this.GetTable<Notification>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<MedicationType> MedicationTypes
		{
			get
			{
				return this.GetTable<MedicationType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Animals")]
	public partial class Animal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UniqueAnimalId;
		
		private System.Nullable<int> _ChargeCode_Id;
		
		private System.Nullable<System.DateTime> _ArrivalDate;
		
		private bool _BornHere;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private System.Nullable<System.DateTime> _DeathDate;
		
		private System.Nullable<int> _CauseOfDeath;
		
		private string _Tag;
		
		private string _Investigator_Id;
		
		private System.Nullable<int> _Colour_Id;
		
		private System.Nullable<int> _BaseWeight;
		
		private System.Nullable<int> _FeedingGroup_Id;
		
		private System.Nullable<int> _Strain_Id;
		
		private int _Source_Id;
		
		private int _ArrivalStatus_Id;
		
		private System.Nullable<int> _Sex;
		
		private int _AliveStatus;
		
		private int _Manipulation;
		
		private int _Grading;
		
		private int _Room_Id;
		
		private System.Nullable<int> _Group_Id;
		
		private bool _HasPicture;
		
		private System.Nullable<int> _ApprovalNumber_Id;
		
		private EntitySet<Medication> _Medications;
		
		private EntitySet<Notification> _Notifications;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUniqueAnimalIdChanging(string value);
    partial void OnUniqueAnimalIdChanged();
    partial void OnChargeCode_IdChanging(System.Nullable<int> value);
    partial void OnChargeCode_IdChanged();
    partial void OnArrivalDateChanging(System.Nullable<System.DateTime> value);
    partial void OnArrivalDateChanged();
    partial void OnBornHereChanging(bool value);
    partial void OnBornHereChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnDeathDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeathDateChanged();
    partial void OnCauseOfDeathChanging(System.Nullable<int> value);
    partial void OnCauseOfDeathChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    partial void OnInvestigator_IdChanging(string value);
    partial void OnInvestigator_IdChanged();
    partial void OnColour_IdChanging(System.Nullable<int> value);
    partial void OnColour_IdChanged();
    partial void OnBaseWeightChanging(System.Nullable<int> value);
    partial void OnBaseWeightChanged();
    partial void OnFeedingGroup_IdChanging(System.Nullable<int> value);
    partial void OnFeedingGroup_IdChanged();
    partial void OnStrain_IdChanging(System.Nullable<int> value);
    partial void OnStrain_IdChanged();
    partial void OnSource_IdChanging(int value);
    partial void OnSource_IdChanged();
    partial void OnArrivalStatus_IdChanging(int value);
    partial void OnArrivalStatus_IdChanged();
    partial void OnSexChanging(System.Nullable<int> value);
    partial void OnSexChanged();
    partial void OnAliveStatusChanging(int value);
    partial void OnAliveStatusChanged();
    partial void OnManipulationChanging(int value);
    partial void OnManipulationChanged();
    partial void OnGradingChanging(int value);
    partial void OnGradingChanged();
    partial void OnRoom_IdChanging(int value);
    partial void OnRoom_IdChanged();
    partial void OnGroup_IdChanging(System.Nullable<int> value);
    partial void OnGroup_IdChanged();
    partial void OnHasPictureChanging(bool value);
    partial void OnHasPictureChanged();
    partial void OnApprovalNumber_IdChanging(System.Nullable<int> value);
    partial void OnApprovalNumber_IdChanged();
    #endregion
		
		public Animal()
		{
			this._Medications = new EntitySet<Medication>(new Action<Medication>(this.attach_Medications), new Action<Medication>(this.detach_Medications));
			this._Notifications = new EntitySet<Notification>(new Action<Notification>(this.attach_Notifications), new Action<Notification>(this.detach_Notifications));
			this._AspNetUser = default(EntityRef<AspNetUser>);
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueAnimalId", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string UniqueAnimalId
		{
			get
			{
				return this._UniqueAnimalId;
			}
			set
			{
				if ((this._UniqueAnimalId != value))
				{
					this.OnUniqueAnimalIdChanging(value);
					this.SendPropertyChanging();
					this._UniqueAnimalId = value;
					this.SendPropertyChanged("UniqueAnimalId");
					this.OnUniqueAnimalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChargeCode_Id", DbType="Int")]
		public System.Nullable<int> ChargeCode_Id
		{
			get
			{
				return this._ChargeCode_Id;
			}
			set
			{
				if ((this._ChargeCode_Id != value))
				{
					this.OnChargeCode_IdChanging(value);
					this.SendPropertyChanging();
					this._ChargeCode_Id = value;
					this.SendPropertyChanged("ChargeCode_Id");
					this.OnChargeCode_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArrivalDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ArrivalDate
		{
			get
			{
				return this._ArrivalDate;
			}
			set
			{
				if ((this._ArrivalDate != value))
				{
					this.OnArrivalDateChanging(value);
					this.SendPropertyChanging();
					this._ArrivalDate = value;
					this.SendPropertyChanged("ArrivalDate");
					this.OnArrivalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BornHere", DbType="Bit NOT NULL")]
		public bool BornHere
		{
			get
			{
				return this._BornHere;
			}
			set
			{
				if ((this._BornHere != value))
				{
					this.OnBornHereChanging(value);
					this.SendPropertyChanging();
					this._BornHere = value;
					this.SendPropertyChanged("BornHere");
					this.OnBornHereChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeathDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeathDate
		{
			get
			{
				return this._DeathDate;
			}
			set
			{
				if ((this._DeathDate != value))
				{
					this.OnDeathDateChanging(value);
					this.SendPropertyChanging();
					this._DeathDate = value;
					this.SendPropertyChanged("DeathDate");
					this.OnDeathDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CauseOfDeath", DbType="Int")]
		public System.Nullable<int> CauseOfDeath
		{
			get
			{
				return this._CauseOfDeath;
			}
			set
			{
				if ((this._CauseOfDeath != value))
				{
					this.OnCauseOfDeathChanging(value);
					this.SendPropertyChanging();
					this._CauseOfDeath = value;
					this.SendPropertyChanged("CauseOfDeath");
					this.OnCauseOfDeathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tag", DbType="NVarChar(50)")]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Investigator_Id", DbType="NVarChar(128)")]
		public string Investigator_Id
		{
			get
			{
				return this._Investigator_Id;
			}
			set
			{
				if ((this._Investigator_Id != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvestigator_IdChanging(value);
					this.SendPropertyChanging();
					this._Investigator_Id = value;
					this.SendPropertyChanged("Investigator_Id");
					this.OnInvestigator_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Colour_Id", DbType="Int")]
		public System.Nullable<int> Colour_Id
		{
			get
			{
				return this._Colour_Id;
			}
			set
			{
				if ((this._Colour_Id != value))
				{
					this.OnColour_IdChanging(value);
					this.SendPropertyChanging();
					this._Colour_Id = value;
					this.SendPropertyChanged("Colour_Id");
					this.OnColour_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseWeight", DbType="Int")]
		public System.Nullable<int> BaseWeight
		{
			get
			{
				return this._BaseWeight;
			}
			set
			{
				if ((this._BaseWeight != value))
				{
					this.OnBaseWeightChanging(value);
					this.SendPropertyChanging();
					this._BaseWeight = value;
					this.SendPropertyChanged("BaseWeight");
					this.OnBaseWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedingGroup_Id", DbType="Int")]
		public System.Nullable<int> FeedingGroup_Id
		{
			get
			{
				return this._FeedingGroup_Id;
			}
			set
			{
				if ((this._FeedingGroup_Id != value))
				{
					this.OnFeedingGroup_IdChanging(value);
					this.SendPropertyChanging();
					this._FeedingGroup_Id = value;
					this.SendPropertyChanged("FeedingGroup_Id");
					this.OnFeedingGroup_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Strain_Id", DbType="Int")]
		public System.Nullable<int> Strain_Id
		{
			get
			{
				return this._Strain_Id;
			}
			set
			{
				if ((this._Strain_Id != value))
				{
					this.OnStrain_IdChanging(value);
					this.SendPropertyChanging();
					this._Strain_Id = value;
					this.SendPropertyChanged("Strain_Id");
					this.OnStrain_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source_Id", DbType="Int NOT NULL")]
		public int Source_Id
		{
			get
			{
				return this._Source_Id;
			}
			set
			{
				if ((this._Source_Id != value))
				{
					this.OnSource_IdChanging(value);
					this.SendPropertyChanging();
					this._Source_Id = value;
					this.SendPropertyChanged("Source_Id");
					this.OnSource_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArrivalStatus_Id", DbType="Int NOT NULL")]
		public int ArrivalStatus_Id
		{
			get
			{
				return this._ArrivalStatus_Id;
			}
			set
			{
				if ((this._ArrivalStatus_Id != value))
				{
					this.OnArrivalStatus_IdChanging(value);
					this.SendPropertyChanging();
					this._ArrivalStatus_Id = value;
					this.SendPropertyChanged("ArrivalStatus_Id");
					this.OnArrivalStatus_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="Int")]
		public System.Nullable<int> Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AliveStatus", DbType="Int NOT NULL")]
		public int AliveStatus
		{
			get
			{
				return this._AliveStatus;
			}
			set
			{
				if ((this._AliveStatus != value))
				{
					this.OnAliveStatusChanging(value);
					this.SendPropertyChanging();
					this._AliveStatus = value;
					this.SendPropertyChanged("AliveStatus");
					this.OnAliveStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manipulation", DbType="Int NOT NULL")]
		public int Manipulation
		{
			get
			{
				return this._Manipulation;
			}
			set
			{
				if ((this._Manipulation != value))
				{
					this.OnManipulationChanging(value);
					this.SendPropertyChanging();
					this._Manipulation = value;
					this.SendPropertyChanged("Manipulation");
					this.OnManipulationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Grading", DbType="Int NOT NULL")]
		public int Grading
		{
			get
			{
				return this._Grading;
			}
			set
			{
				if ((this._Grading != value))
				{
					this.OnGradingChanging(value);
					this.SendPropertyChanging();
					this._Grading = value;
					this.SendPropertyChanged("Grading");
					this.OnGradingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room_Id", DbType="Int NOT NULL")]
		public int Room_Id
		{
			get
			{
				return this._Room_Id;
			}
			set
			{
				if ((this._Room_Id != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoom_IdChanging(value);
					this.SendPropertyChanging();
					this._Room_Id = value;
					this.SendPropertyChanged("Room_Id");
					this.OnRoom_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Group_Id", DbType="Int")]
		public System.Nullable<int> Group_Id
		{
			get
			{
				return this._Group_Id;
			}
			set
			{
				if ((this._Group_Id != value))
				{
					this.OnGroup_IdChanging(value);
					this.SendPropertyChanging();
					this._Group_Id = value;
					this.SendPropertyChanged("Group_Id");
					this.OnGroup_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasPicture", DbType="Bit NOT NULL")]
		public bool HasPicture
		{
			get
			{
				return this._HasPicture;
			}
			set
			{
				if ((this._HasPicture != value))
				{
					this.OnHasPictureChanging(value);
					this.SendPropertyChanging();
					this._HasPicture = value;
					this.SendPropertyChanged("HasPicture");
					this.OnHasPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApprovalNumber_Id", DbType="Int")]
		public System.Nullable<int> ApprovalNumber_Id
		{
			get
			{
				return this._ApprovalNumber_Id;
			}
			set
			{
				if ((this._ApprovalNumber_Id != value))
				{
					this.OnApprovalNumber_IdChanging(value);
					this.SendPropertyChanging();
					this._ApprovalNumber_Id = value;
					this.SendPropertyChanged("ApprovalNumber_Id");
					this.OnApprovalNumber_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_Medication", Storage="_Medications", ThisKey="Id", OtherKey="Animal_Id")]
		public EntitySet<Medication> Medications
		{
			get
			{
				return this._Medications;
			}
			set
			{
				this._Medications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_Notification", Storage="_Notifications", ThisKey="Id", OtherKey="Animal_Id")]
		public EntitySet<Notification> Notifications
		{
			get
			{
				return this._Notifications;
			}
			set
			{
				this._Notifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_Animal", Storage="_AspNetUser", ThisKey="Investigator_Id", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._Investigator_Id = value.Id;
					}
					else
					{
						this._Investigator_Id = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Animal", Storage="_Room", ThisKey="Room_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Animals.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Animals.Add(this);
						this._Room_Id = value.Id;
					}
					else
					{
						this._Room_Id = default(int);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medications(Medication entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Medications(Medication entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
		
		private void attach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Animal = this;
		}
		
		private void detach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Animal = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUsers")]
	public partial class AspNetUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private bool _EmailConfirmed;
		
		private string _PasswordHash;
		
		private string _SecurityStamp;
		
		private string _PhoneNumber;
		
		private bool _PhoneNumberConfirmed;
		
		private bool _TwoFactorEnabled;
		
		private System.Nullable<System.DateTime> _LockoutEndDateUtc;
		
		private bool _LockoutEnabled;
		
		private int _AccessFailedCount;
		
		private string _UserName;
		
		private string _Investigator_Id;
		
		private string _Discriminator;
		
		private EntitySet<Animal> _Animals;
		
		private EntitySet<AspNetUser> _AspNetUsers;
		
		private EntitySet<Medication> _Medications;
		
		private EntitySet<Room> _Rooms;
		
		private EntityRef<AspNetUser> _AspNetUser1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailConfirmedChanging(bool value);
    partial void OnEmailConfirmedChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberConfirmedChanging(bool value);
    partial void OnPhoneNumberConfirmedChanged();
    partial void OnTwoFactorEnabledChanging(bool value);
    partial void OnTwoFactorEnabledChanged();
    partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLockoutEndDateUtcChanged();
    partial void OnLockoutEnabledChanging(bool value);
    partial void OnLockoutEnabledChanged();
    partial void OnAccessFailedCountChanging(int value);
    partial void OnAccessFailedCountChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnInvestigator_IdChanging(string value);
    partial void OnInvestigator_IdChanged();
    partial void OnDiscriminatorChanging(string value);
    partial void OnDiscriminatorChanged();
    #endregion
		
		public AspNetUser()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			this._AspNetUsers = new EntitySet<AspNetUser>(new Action<AspNetUser>(this.attach_AspNetUsers), new Action<AspNetUser>(this.detach_AspNetUsers));
			this._Medications = new EntitySet<Medication>(new Action<Medication>(this.attach_Medications), new Action<Medication>(this.detach_Medications));
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			this._AspNetUser1 = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(MAX)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(MAX)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit NOT NULL")]
		public bool EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberConfirmed", DbType="Bit NOT NULL")]
		public bool PhoneNumberConfirmed
		{
			get
			{
				return this._PhoneNumberConfirmed;
			}
			set
			{
				if ((this._PhoneNumberConfirmed != value))
				{
					this.OnPhoneNumberConfirmedChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberConfirmed = value;
					this.SendPropertyChanged("PhoneNumberConfirmed");
					this.OnPhoneNumberConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit NOT NULL")]
		public bool TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this.OnTwoFactorEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorEnabled = value;
					this.SendPropertyChanged("TwoFactorEnabled");
					this.OnTwoFactorEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEndDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockoutEndDateUtc
		{
			get
			{
				return this._LockoutEndDateUtc;
			}
			set
			{
				if ((this._LockoutEndDateUtc != value))
				{
					this.OnLockoutEndDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LockoutEndDateUtc = value;
					this.SendPropertyChanged("LockoutEndDateUtc");
					this.OnLockoutEndDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit NOT NULL")]
		public bool LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this.OnLockoutEnabledChanging(value);
					this.SendPropertyChanging();
					this._LockoutEnabled = value;
					this.SendPropertyChanged("LockoutEnabled");
					this.OnLockoutEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFailedCount", DbType="Int NOT NULL")]
		public int AccessFailedCount
		{
			get
			{
				return this._AccessFailedCount;
			}
			set
			{
				if ((this._AccessFailedCount != value))
				{
					this.OnAccessFailedCountChanging(value);
					this.SendPropertyChanging();
					this._AccessFailedCount = value;
					this.SendPropertyChanged("AccessFailedCount");
					this.OnAccessFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Investigator_Id", DbType="NVarChar(128)")]
		public string Investigator_Id
		{
			get
			{
				return this._Investigator_Id;
			}
			set
			{
				if ((this._Investigator_Id != value))
				{
					if (this._AspNetUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvestigator_IdChanging(value);
					this.SendPropertyChanging();
					this._Investigator_Id = value;
					this.SendPropertyChanged("Investigator_Id");
					this.OnInvestigator_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discriminator", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Discriminator
		{
			get
			{
				return this._Discriminator;
			}
			set
			{
				if ((this._Discriminator != value))
				{
					this.OnDiscriminatorChanging(value);
					this.SendPropertyChanging();
					this._Discriminator = value;
					this.SendPropertyChanged("Discriminator");
					this.OnDiscriminatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_Animal", Storage="_Animals", ThisKey="Id", OtherKey="Investigator_Id")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUser", Storage="_AspNetUsers", ThisKey="Id", OtherKey="Investigator_Id")]
		public EntitySet<AspNetUser> AspNetUsers
		{
			get
			{
				return this._AspNetUsers;
			}
			set
			{
				this._AspNetUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_Medication", Storage="_Medications", ThisKey="Id", OtherKey="WhoToNotify_Id")]
		public EntitySet<Medication> Medications
		{
			get
			{
				return this._Medications;
			}
			set
			{
				this._Medications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_Room", Storage="_Rooms", ThisKey="Id", OtherKey="Technician_Id")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUser", Storage="_AspNetUser1", ThisKey="Investigator_Id", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser1
		{
			get
			{
				return this._AspNetUser1.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser1.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser1.Entity = null;
						previousValue.AspNetUsers.Remove(this);
					}
					this._AspNetUser1.Entity = value;
					if ((value != null))
					{
						value.AspNetUsers.Add(this);
						this._Investigator_Id = value.Id;
					}
					else
					{
						this._Investigator_Id = default(string);
					}
					this.SendPropertyChanged("AspNetUser1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUsers(AspNetUser entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser1 = this;
		}
		
		private void detach_AspNetUsers(AspNetUser entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser1 = null;
		}
		
		private void attach_Medications(Medication entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_Medications(Medication entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medications")]
	public partial class Medication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Timestamp;
		
		private int _Animal_Id;
		
		private string _Dosage;
		
		private string _Rate;
		
		private System.Nullable<int> _Frequency;
		
		private System.Nullable<int> _FrequencyValue;
		
		private System.Nullable<int> _Duration;
		
		private System.Nullable<int> _DurationValue;
		
		private string _Comments;
		
		private int _MedicationType_Id;
		
		private System.Nullable<int> _IncidentReport_Id;
		
		private string _WhoToNotify_Id;
		
		private EntitySet<Notification> _Notifications;
		
		private EntityRef<Animal> _Animal;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
		private EntityRef<MedicationType> _MedicationType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnAnimal_IdChanging(int value);
    partial void OnAnimal_IdChanged();
    partial void OnDosageChanging(string value);
    partial void OnDosageChanged();
    partial void OnRateChanging(string value);
    partial void OnRateChanged();
    partial void OnFrequencyChanging(System.Nullable<int> value);
    partial void OnFrequencyChanged();
    partial void OnFrequencyValueChanging(System.Nullable<int> value);
    partial void OnFrequencyValueChanged();
    partial void OnDurationChanging(System.Nullable<int> value);
    partial void OnDurationChanged();
    partial void OnDurationValueChanging(System.Nullable<int> value);
    partial void OnDurationValueChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnMedicationType_IdChanging(int value);
    partial void OnMedicationType_IdChanged();
    partial void OnIncidentReport_IdChanging(System.Nullable<int> value);
    partial void OnIncidentReport_IdChanged();
    partial void OnWhoToNotify_IdChanging(string value);
    partial void OnWhoToNotify_IdChanged();
    #endregion
		
		public Medication()
		{
			this._Notifications = new EntitySet<Notification>(new Action<Notification>(this.attach_Notifications), new Action<Notification>(this.detach_Notifications));
			this._Animal = default(EntityRef<Animal>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			this._MedicationType = default(EntityRef<MedicationType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Animal_Id", DbType="Int NOT NULL")]
		public int Animal_Id
		{
			get
			{
				return this._Animal_Id;
			}
			set
			{
				if ((this._Animal_Id != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnimal_IdChanging(value);
					this.SendPropertyChanging();
					this._Animal_Id = value;
					this.SendPropertyChanged("Animal_Id");
					this.OnAnimal_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dosage", DbType="NVarChar(MAX)")]
		public string Dosage
		{
			get
			{
				return this._Dosage;
			}
			set
			{
				if ((this._Dosage != value))
				{
					this.OnDosageChanging(value);
					this.SendPropertyChanging();
					this._Dosage = value;
					this.SendPropertyChanged("Dosage");
					this.OnDosageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="NVarChar(MAX)")]
		public string Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frequency", DbType="Int")]
		public System.Nullable<int> Frequency
		{
			get
			{
				return this._Frequency;
			}
			set
			{
				if ((this._Frequency != value))
				{
					this.OnFrequencyChanging(value);
					this.SendPropertyChanging();
					this._Frequency = value;
					this.SendPropertyChanged("Frequency");
					this.OnFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FrequencyValue", DbType="Int")]
		public System.Nullable<int> FrequencyValue
		{
			get
			{
				return this._FrequencyValue;
			}
			set
			{
				if ((this._FrequencyValue != value))
				{
					this.OnFrequencyValueChanging(value);
					this.SendPropertyChanging();
					this._FrequencyValue = value;
					this.SendPropertyChanged("FrequencyValue");
					this.OnFrequencyValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int")]
		public System.Nullable<int> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DurationValue", DbType="Int")]
		public System.Nullable<int> DurationValue
		{
			get
			{
				return this._DurationValue;
			}
			set
			{
				if ((this._DurationValue != value))
				{
					this.OnDurationValueChanging(value);
					this.SendPropertyChanging();
					this._DurationValue = value;
					this.SendPropertyChanged("DurationValue");
					this.OnDurationValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicationType_Id", DbType="Int NOT NULL")]
		public int MedicationType_Id
		{
			get
			{
				return this._MedicationType_Id;
			}
			set
			{
				if ((this._MedicationType_Id != value))
				{
					if (this._MedicationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicationType_IdChanging(value);
					this.SendPropertyChanging();
					this._MedicationType_Id = value;
					this.SendPropertyChanged("MedicationType_Id");
					this.OnMedicationType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncidentReport_Id", DbType="Int")]
		public System.Nullable<int> IncidentReport_Id
		{
			get
			{
				return this._IncidentReport_Id;
			}
			set
			{
				if ((this._IncidentReport_Id != value))
				{
					this.OnIncidentReport_IdChanging(value);
					this.SendPropertyChanging();
					this._IncidentReport_Id = value;
					this.SendPropertyChanged("IncidentReport_Id");
					this.OnIncidentReport_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WhoToNotify_Id", DbType="NVarChar(128)")]
		public string WhoToNotify_Id
		{
			get
			{
				return this._WhoToNotify_Id;
			}
			set
			{
				if ((this._WhoToNotify_Id != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWhoToNotify_IdChanging(value);
					this.SendPropertyChanging();
					this._WhoToNotify_Id = value;
					this.SendPropertyChanged("WhoToNotify_Id");
					this.OnWhoToNotify_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medication_Notification", Storage="_Notifications", ThisKey="Id", OtherKey="Medication_Id")]
		public EntitySet<Notification> Notifications
		{
			get
			{
				return this._Notifications;
			}
			set
			{
				this._Notifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_Medication", Storage="_Animal", ThisKey="Animal_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Medications.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Medications.Add(this);
						this._Animal_Id = value.Id;
					}
					else
					{
						this._Animal_Id = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_Medication", Storage="_AspNetUser", ThisKey="WhoToNotify_Id", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.Medications.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.Medications.Add(this);
						this._WhoToNotify_Id = value.Id;
					}
					else
					{
						this._WhoToNotify_Id = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicationType_Medication", Storage="_MedicationType", ThisKey="MedicationType_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MedicationType MedicationType
		{
			get
			{
				return this._MedicationType.Entity;
			}
			set
			{
				MedicationType previousValue = this._MedicationType.Entity;
				if (((previousValue != value) 
							|| (this._MedicationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MedicationType.Entity = null;
						previousValue.Medications.Remove(this);
					}
					this._MedicationType.Entity = value;
					if ((value != null))
					{
						value.Medications.Add(this);
						this._MedicationType_Id = value.Id;
					}
					else
					{
						this._MedicationType_Id = default(int);
					}
					this.SendPropertyChanged("MedicationType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Medication = this;
		}
		
		private void detach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.Medication = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notifications")]
	public partial class Notification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _NotificationDate;
		
		private global::AnimalDB.Notifier.NotificationType _Type;
		
		private System.Nullable<int> _Medication_Id;
		
		private int _Animal_Id;
		
		private EntityRef<Animal> _Animal;
		
		private EntityRef<Medication> _Medication;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNotificationDateChanging(System.DateTime value);
    partial void OnNotificationDateChanged();
    partial void OnTypeChanging(global::AnimalDB.Notifier.NotificationType value);
    partial void OnTypeChanged();
    partial void OnMedication_IdChanging(System.Nullable<int> value);
    partial void OnMedication_IdChanged();
    partial void OnAnimal_IdChanging(int value);
    partial void OnAnimal_IdChanged();
    #endregion
		
		public Notification()
		{
			this._Animal = default(EntityRef<Animal>);
			this._Medication = default(EntityRef<Medication>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationDate", DbType="DateTime NOT NULL")]
		public System.DateTime NotificationDate
		{
			get
			{
				return this._NotificationDate;
			}
			set
			{
				if ((this._NotificationDate != value))
				{
					this.OnNotificationDateChanging(value);
					this.SendPropertyChanging();
					this._NotificationDate = value;
					this.SendPropertyChanged("NotificationDate");
					this.OnNotificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL", CanBeNull=false)]
		public global::AnimalDB.Notifier.NotificationType Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Medication_Id", DbType="Int")]
		public System.Nullable<int> Medication_Id
		{
			get
			{
				return this._Medication_Id;
			}
			set
			{
				if ((this._Medication_Id != value))
				{
					if (this._Medication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedication_IdChanging(value);
					this.SendPropertyChanging();
					this._Medication_Id = value;
					this.SendPropertyChanged("Medication_Id");
					this.OnMedication_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Animal_Id", DbType="Int NOT NULL")]
		public int Animal_Id
		{
			get
			{
				return this._Animal_Id;
			}
			set
			{
				if ((this._Animal_Id != value))
				{
					if (this._Animal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnimal_IdChanging(value);
					this.SendPropertyChanging();
					this._Animal_Id = value;
					this.SendPropertyChanged("Animal_Id");
					this.OnAnimal_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Animal_Notification", Storage="_Animal", ThisKey="Animal_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Animal Animal
		{
			get
			{
				return this._Animal.Entity;
			}
			set
			{
				Animal previousValue = this._Animal.Entity;
				if (((previousValue != value) 
							|| (this._Animal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Animal.Entity = null;
						previousValue.Notifications.Remove(this);
					}
					this._Animal.Entity = value;
					if ((value != null))
					{
						value.Notifications.Add(this);
						this._Animal_Id = value.Id;
					}
					else
					{
						this._Animal_Id = default(int);
					}
					this.SendPropertyChanged("Animal");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medication_Notification", Storage="_Medication", ThisKey="Medication_Id", OtherKey="Id", IsForeignKey=true)]
		public Medication Medication
		{
			get
			{
				return this._Medication.Entity;
			}
			set
			{
				Medication previousValue = this._Medication.Entity;
				if (((previousValue != value) 
							|| (this._Medication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medication.Entity = null;
						previousValue.Notifications.Remove(this);
					}
					this._Medication.Entity = value;
					if ((value != null))
					{
						value.Notifications.Add(this);
						this._Medication_Id = value.Id;
					}
					else
					{
						this._Medication_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Medication");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rooms")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private string _Technician_Id;
		
		private EntitySet<Animal> _Animals;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTechnician_IdChanging(string value);
    partial void OnTechnician_IdChanged();
    #endregion
		
		public Room()
		{
			this._Animals = new EntitySet<Animal>(new Action<Animal>(this.attach_Animals), new Action<Animal>(this.detach_Animals));
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Technician_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Technician_Id
		{
			get
			{
				return this._Technician_Id;
			}
			set
			{
				if ((this._Technician_Id != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechnician_IdChanging(value);
					this.SendPropertyChanging();
					this._Technician_Id = value;
					this.SendPropertyChanged("Technician_Id");
					this.OnTechnician_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Animal", Storage="_Animals", ThisKey="Id", OtherKey="Room_Id")]
		public EntitySet<Animal> Animals
		{
			get
			{
				return this._Animals;
			}
			set
			{
				this._Animals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_Room", Storage="_AspNetUser", ThisKey="Technician_Id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._Technician_Id = value.Id;
					}
					else
					{
						this._Technician_Id = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Animals(Animal entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicationTypes")]
	public partial class MedicationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private EntitySet<Medication> _Medications;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public MedicationType()
		{
			this._Medications = new EntitySet<Medication>(new Action<Medication>(this.attach_Medications), new Action<Medication>(this.detach_Medications));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MedicationType_Medication", Storage="_Medications", ThisKey="Id", OtherKey="MedicationType_Id")]
		public EntitySet<Medication> Medications
		{
			get
			{
				return this._Medications;
			}
			set
			{
				this._Medications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medications(Medication entity)
		{
			this.SendPropertyChanging();
			entity.MedicationType = this;
		}
		
		private void detach_Medications(Medication entity)
		{
			this.SendPropertyChanging();
			entity.MedicationType = null;
		}
	}
}
#pragma warning restore 1591
